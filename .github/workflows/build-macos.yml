name: Build macOS Electron App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up pnpm
      uses: pnpm/action-setup@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Or choose a specific LTS version
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install

    - name: Extract App Info
      id: get_info
      run: |
        APP_VERSION=$(node -p "require('./package.json').version")
        PRODUCT_NAME=$(node -p "require('./package.json').build.productName || require('./package.json').name")
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
        echo "PRODUCT_NAME=${PRODUCT_NAME}" >> $GITHUB_ENV
        echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
        echo "::set-output name=version::${APP_VERSION}"
        echo "::set-output name=product_name::${PRODUCT_NAME}"
        echo "::set-output name=short_sha::${SHORT_SHA}"

    - name: Build Electron app
      run: pnpm dist # This script handles both vite build and electron build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      id: create_release # Add an ID to reference the release later if needed
      uses: softprops/action-gh-release@v2
      with:
        files: release/${{ env.PRODUCT_NAME }}-${{ env.APP_VERSION }}-${{ runner.arch }}.dmg # Include arch in file pattern
        tag_name: v${{ env.APP_VERSION }}-${{ env.SHORT_SHA }} # Use extracted version and short SHA for tag
        name: Release v${{ env.APP_VERSION }} (${{ env.SHORT_SHA }}) # Include short SHA in release name
        body: "Automated build for v${{ env.APP_VERSION }} from commit ${{ env.SHORT_SHA }}"
        prerelease: true # Mark as pre-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout Tap Repo
      uses: actions/checkout@v4
      with:
        repository: ricklamers/homebrew-groq-desktop-unofficial # Your tap repo
        token: ${{ secrets.TAP_REPO_PAT }} # PAT with repo write access stored as secret
        path: homebrew-tap # Checkout to a specific subdirectory

    - name: Update Cask File
      run: |
        # Get runner architecture (convert to lowercase if needed, though electron-builder seems to use uppercase)
        ARCH="${{ runner.arch }}"
        echo "Runner architecture: ${ARCH}"

        # Construct DMG name and URL using extracted info and arch
        # PRODUCT_NAME, APP_VERSION, SHORT_SHA are already in env from previous step
        DMG_NAME="${PRODUCT_NAME}-${{ env.APP_VERSION }}-${ARCH}.dmg"
        DMG_URL_ENCODED=$(printf %s "${DMG_NAME}" | jq -sRr @uri) # URL encode the DMG name
        DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/v${{ env.APP_VERSION }}-${{ env.SHORT_SHA }}/${DMG_URL_ENCODED}"

        echo "Expected DMG Filename: ${DMG_NAME}"
        echo "Constructed Download URL: ${DOWNLOAD_URL}"
        echo "Looking for local DMG at: release/${DMG_NAME}"

        # Ensure local DMG exists
        if [ ! -f "release/${DMG_NAME}" ]; then
          echo "Error: DMG file 'release/${DMG_NAME}' not found after build."
          # List contents for debugging
          ls -l release/
          exit 1
        fi

        # Calculate SHA256 from the local file generated by the build
        SHA256=$(shasum -a 256 "release/${DMG_NAME}" | awk '{ print $1 }')
        if [ -z "${SHA256}" ]; then
          echo "Error: Failed to calculate SHA256 for release/${DMG_NAME}"
          exit 1
        fi
        echo "Calculated SHA256: ${SHA256}"

        CASK_FILE="homebrew-tap/Casks/groq-desktop.rb"

        # Check if cask file exists before attempting to modify
        if [ ! -f "${CASK_FILE}" ]; then
          echo "Error: Cask file '${CASK_FILE}' not found in tap repository."
          # List contents for debugging
          ls -l homebrew-tap/
          ls -l homebrew-tap/Casks/
          exit 1
        fi

        echo "Updating Cask File: ${CASK_FILE}"
        # Use sed to replace placeholders - use pipe delimiter for URLs/paths
        sed -i.bak "s|__VERSION__|${{ env.APP_VERSION }}|g" "${CASK_FILE}"
        sed -i.bak "s|__SHA256__|${SHA256}|g" "${CASK_FILE}"
        sed -i.bak "s|__URL__|${DOWNLOAD_URL}|g" "${CASK_FILE}"
        rm "${CASK_FILE}.bak" # Clean up sed backup

        echo "Updated Cask File Content:"
        cat "${CASK_FILE}"
      shell: bash

    - name: Commit and Push Cask Update
      run: |
        cd homebrew-tap
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add Casks/groq-desktop.rb
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes detected in the cask file. Skipping commit."
        else
          echo "Changes detected. Committing and pushing cask update."
          git commit -m "Update groq-desktop cask to v${{ env.APP_VERSION }}-${{ env.SHORT_SHA }}"
          git push
          echo "Pushed cask update to ricklamers/homebrew-groq-desktop-unofficial."
        fi
      shell: bash

    # Removed old upload-artifact step as release step handles it 